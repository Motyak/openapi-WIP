# coding: utf-8

"""
    Spotify Web API with fixes and improvements from sonallux

    You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 

    The version of the OpenAPI document: 2023.8.30
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
from inspect import getfullargspec
import json
import pprint
import re  # noqa: F401

from typing import Any, List, Optional
from pydantic import BaseModel, Field, StrictStr, ValidationError, validator
from openapi_client.models.episode_object import EpisodeObject
from openapi_client.models.track_object import TrackObject
from typing import Union, Any, List, TYPE_CHECKING
from pydantic import StrictStr, Field

QUEUEOBJECTCURRENTLYPLAYING_ONE_OF_SCHEMAS = ["EpisodeObject", "TrackObject"]

class QueueObjectCurrentlyPlaying(BaseModel):
    """
    The currently playing track or episode. Can be `null`.
    """
    # data type: TrackObject
    oneof_schema_1_validator: Optional[TrackObject] = None
    # data type: EpisodeObject
    oneof_schema_2_validator: Optional[EpisodeObject] = None
    if TYPE_CHECKING:
        actual_instance: Union[EpisodeObject, TrackObject]
    else:
        actual_instance: Any
    one_of_schemas: List[str] = Field(QUEUEOBJECTCURRENTLYPLAYING_ONE_OF_SCHEMAS, const=True)

    class Config:
        validate_assignment = True

    discriminator_value_class_map = {
    }

    def __init__(self, *args, **kwargs):
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = QueueObjectCurrentlyPlaying.construct()
        error_messages = []
        match = 0
        # validate data type: TrackObject
        if not isinstance(v, TrackObject):
            error_messages.append(f"Error! Input type `{type(v)}` is not `TrackObject`")
        else:
            match += 1
        # validate data type: EpisodeObject
        if not isinstance(v, EpisodeObject):
            error_messages.append(f"Error! Input type `{type(v)}` is not `EpisodeObject`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in QueueObjectCurrentlyPlaying with oneOf schemas: EpisodeObject, TrackObject. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in QueueObjectCurrentlyPlaying with oneOf schemas: EpisodeObject, TrackObject. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: dict) -> QueueObjectCurrentlyPlaying:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> QueueObjectCurrentlyPlaying:
        """Returns the object represented by the json string"""
        instance = QueueObjectCurrentlyPlaying.construct()
        error_messages = []
        match = 0

        # deserialize data into TrackObject
        try:
            instance.actual_instance = TrackObject.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into EpisodeObject
        try:
            instance.actual_instance = EpisodeObject.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into QueueObjectCurrentlyPlaying with oneOf schemas: EpisodeObject, TrackObject. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into QueueObjectCurrentlyPlaying with oneOf schemas: EpisodeObject, TrackObject. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        to_json = getattr(self.actual_instance, "to_json", None)
        if callable(to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> dict:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        to_dict = getattr(self.actual_instance, "to_dict", None)
        if callable(to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.dict())


