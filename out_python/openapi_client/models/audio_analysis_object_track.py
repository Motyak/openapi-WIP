# coding: utf-8

"""
    Spotify Web API with fixes and improvements from sonallux

    You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 

    The version of the OpenAPI document: 2023.8.30
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr, confloat, conint

class AudioAnalysisObjectTrack(BaseModel):
    """
    AudioAnalysisObjectTrack
    """
    num_samples: Optional[StrictInt] = Field(None, description="The exact number of audio samples analyzed from this track. See also `analysis_sample_rate`.")
    duration: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="Length of the track in seconds.")
    sample_md5: Optional[StrictStr] = Field(None, description="This field will always contain the empty string.")
    offset_seconds: Optional[StrictInt] = Field(None, description="An offset to the start of the region of the track that was analyzed. (As the entire track is analyzed, this should always be 0.)")
    window_seconds: Optional[StrictInt] = Field(None, description="The length of the region of the track was analyzed, if a subset of the track was analyzed. (As the entire track is analyzed, this should always be 0.)")
    analysis_sample_rate: Optional[StrictInt] = Field(None, description="The sample rate used to decode and analyze this track. May differ from the actual sample rate of this track available on Spotify.")
    analysis_channels: Optional[StrictInt] = Field(None, description="The number of channels used for analysis. If 1, all channels are summed together to mono before analysis.")
    end_of_fade_in: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="The time, in seconds, at which the track's fade-in period ends. If the track has no fade-in, this will be 0.0.")
    start_of_fade_out: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="The time, in seconds, at which the track's fade-out period starts. If the track has no fade-out, this should match the track's length.")
    loudness: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="The overall loudness of a track in decibels (dB). Loudness values are averaged across the entire track and are useful for comparing relative loudness of tracks. Loudness is the quality of a sound that is the primary psychological correlate of physical strength (amplitude). Values typically range between -60 and 0 db. ")
    tempo: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="The overall estimated tempo of a track in beats per minute (BPM). In musical terminology, tempo is the speed or pace of a given piece and derives directly from the average beat duration. ")
    tempo_confidence: Optional[Union[confloat(le=1, ge=0, strict=True), conint(le=1, ge=0, strict=True)]] = Field(None, description="The confidence, from 0.0 to 1.0, of the reliability of the `tempo`.")
    time_signature: Optional[conint(strict=True, le=7, ge=3)] = Field(None, description="An estimated time signature. The time signature (meter) is a notational convention to specify how many beats are in each bar (or measure). The time signature ranges from 3 to 7 indicating time signatures of \"3/4\", to \"7/4\".")
    time_signature_confidence: Optional[Union[confloat(le=1, ge=0, strict=True), conint(le=1, ge=0, strict=True)]] = Field(None, description="The confidence, from 0.0 to 1.0, of the reliability of the `time_signature`.")
    key: Optional[conint(strict=True, le=11, ge=-1)] = Field(None, description="The key the track is in. Integers map to pitches using standard [Pitch Class notation](https://en.wikipedia.org/wiki/Pitch_class). E.g. 0 = C, 1 = C♯/D♭, 2 = D, and so on. If no key was detected, the value is -1. ")
    key_confidence: Optional[Union[confloat(le=1, ge=0, strict=True), conint(le=1, ge=0, strict=True)]] = Field(None, description="The confidence, from 0.0 to 1.0, of the reliability of the `key`.")
    mode: Optional[StrictInt] = Field(None, description="Mode indicates the modality (major or minor) of a track, the type of scale from which its melodic content is derived. Major is represented by 1 and minor is 0. ")
    mode_confidence: Optional[Union[confloat(le=1, ge=0, strict=True), conint(le=1, ge=0, strict=True)]] = Field(None, description="The confidence, from 0.0 to 1.0, of the reliability of the `mode`.")
    codestring: Optional[StrictStr] = Field(None, description="An [Echo Nest Musical Fingerprint (ENMFP)](https://academiccommons.columbia.edu/doi/10.7916/D8Q248M4) codestring for this track.")
    code_version: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="A version number for the Echo Nest Musical Fingerprint format used in the codestring field.")
    echoprintstring: Optional[StrictStr] = Field(None, description="An [EchoPrint](https://github.com/spotify/echoprint-codegen) codestring for this track.")
    echoprint_version: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="A version number for the EchoPrint format used in the echoprintstring field.")
    synchstring: Optional[StrictStr] = Field(None, description="A [Synchstring](https://github.com/echonest/synchdata) for this track.")
    synch_version: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="A version number for the Synchstring used in the synchstring field.")
    rhythmstring: Optional[StrictStr] = Field(None, description="A Rhythmstring for this track. The format of this string is similar to the Synchstring.")
    rhythm_version: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="A version number for the Rhythmstring used in the rhythmstring field.")
    __properties = ["num_samples", "duration", "sample_md5", "offset_seconds", "window_seconds", "analysis_sample_rate", "analysis_channels", "end_of_fade_in", "start_of_fade_out", "loudness", "tempo", "tempo_confidence", "time_signature", "time_signature_confidence", "key", "key_confidence", "mode", "mode_confidence", "codestring", "code_version", "echoprintstring", "echoprint_version", "synchstring", "synch_version", "rhythmstring", "rhythm_version"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> AudioAnalysisObjectTrack:
        """Create an instance of AudioAnalysisObjectTrack from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AudioAnalysisObjectTrack:
        """Create an instance of AudioAnalysisObjectTrack from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return AudioAnalysisObjectTrack.parse_obj(obj)

        _obj = AudioAnalysisObjectTrack.parse_obj({
            "num_samples": obj.get("num_samples"),
            "duration": obj.get("duration"),
            "sample_md5": obj.get("sample_md5"),
            "offset_seconds": obj.get("offset_seconds"),
            "window_seconds": obj.get("window_seconds"),
            "analysis_sample_rate": obj.get("analysis_sample_rate"),
            "analysis_channels": obj.get("analysis_channels"),
            "end_of_fade_in": obj.get("end_of_fade_in"),
            "start_of_fade_out": obj.get("start_of_fade_out"),
            "loudness": obj.get("loudness"),
            "tempo": obj.get("tempo"),
            "tempo_confidence": obj.get("tempo_confidence"),
            "time_signature": obj.get("time_signature"),
            "time_signature_confidence": obj.get("time_signature_confidence"),
            "key": obj.get("key"),
            "key_confidence": obj.get("key_confidence"),
            "mode": obj.get("mode"),
            "mode_confidence": obj.get("mode_confidence"),
            "codestring": obj.get("codestring"),
            "code_version": obj.get("code_version"),
            "echoprintstring": obj.get("echoprintstring"),
            "echoprint_version": obj.get("echoprint_version"),
            "synchstring": obj.get("synchstring"),
            "synch_version": obj.get("synch_version"),
            "rhythmstring": obj.get("rhythmstring"),
            "rhythm_version": obj.get("rhythm_version")
        })
        return _obj


