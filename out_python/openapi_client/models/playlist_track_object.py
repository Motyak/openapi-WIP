# coding: utf-8

"""
    Spotify Web API with fixes and improvements from sonallux

    You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 

    The version of the OpenAPI document: 2023.8.30
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictBool
from openapi_client.models.playlist_track_object_track import PlaylistTrackObjectTrack
from openapi_client.models.playlist_user_object import PlaylistUserObject

class PlaylistTrackObject(BaseModel):
    """
    PlaylistTrackObject
    """
    added_at: Optional[datetime] = Field(None, description="The date and time the track or episode was added. _**Note**: some very old playlists may return `null` in this field._ ")
    added_by: Optional[PlaylistUserObject] = None
    is_local: Optional[StrictBool] = Field(None, description="Whether this track or episode is a [local file](/documentation/web-api/concepts/playlists/#local-files) or not. ")
    track: Optional[PlaylistTrackObjectTrack] = None
    __properties = ["added_at", "added_by", "is_local", "track"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PlaylistTrackObject:
        """Create an instance of PlaylistTrackObject from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of added_by
        if self.added_by:
            _dict['added_by'] = self.added_by.to_dict()
        # override the default output from pydantic by calling `to_dict()` of track
        if self.track:
            _dict['track'] = self.track.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PlaylistTrackObject:
        """Create an instance of PlaylistTrackObject from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PlaylistTrackObject.parse_obj(obj)

        _obj = PlaylistTrackObject.parse_obj({
            "added_at": obj.get("added_at"),
            "added_by": PlaylistUserObject.from_dict(obj.get("added_by")) if obj.get("added_by") is not None else None,
            "is_local": obj.get("is_local"),
            "track": PlaylistTrackObjectTrack.from_dict(obj.get("track")) if obj.get("track") is not None else None
        })
        return _obj


