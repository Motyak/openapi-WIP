# coding: utf-8

"""
    Spotify Web API with fixes and improvements from sonallux

    You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 

    The version of the OpenAPI document: 2023.8.30
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, conlist, validator
from openapi_client.models.chapter_restriction_object import ChapterRestrictionObject
from openapi_client.models.external_url_object import ExternalUrlObject
from openapi_client.models.image_object import ImageObject
from openapi_client.models.resume_point_object import ResumePointObject

class SimplifiedChapterObject(BaseModel):
    """
    SimplifiedChapterObject
    """
    audio_preview_url: Optional[StrictStr] = Field(..., description="A URL to a 30 second preview (MP3 format) of the episode. `null` if not available. ")
    available_markets: Optional[conlist(StrictStr)] = Field(None, description="A list of the countries in which the chapter can be played, identified by their [ISO 3166-1 alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) code. ")
    chapter_number: StrictInt = Field(..., description="The number of the chapter ")
    description: StrictStr = Field(..., description="A description of the episode. HTML tags are stripped away from this field, use `html_description` field in case HTML tags are needed. ")
    html_description: StrictStr = Field(..., description="A description of the episode. This field may contain HTML tags. ")
    duration_ms: StrictInt = Field(..., description="The episode length in milliseconds. ")
    explicit: StrictBool = Field(..., description="Whether or not the episode has explicit content (true = yes it does; false = no it does not OR unknown). ")
    external_urls: ExternalUrlObject = Field(...)
    href: StrictStr = Field(..., description="A link to the Web API endpoint providing full details of the episode. ")
    id: StrictStr = Field(..., description="The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the episode. ")
    images: conlist(ImageObject) = Field(..., description="The cover art for the episode in various sizes, widest first. ")
    is_playable: StrictBool = Field(..., description="True if the episode is playable in the given market. Otherwise false. ")
    languages: conlist(StrictStr) = Field(..., description="A list of the languages used in the episode, identified by their [ISO 639-1](https://en.wikipedia.org/wiki/ISO_639) code. ")
    name: StrictStr = Field(..., description="The name of the episode. ")
    release_date: StrictStr = Field(..., description="The date the episode was first released, for example `\"1981-12-15\"`. Depending on the precision, it might be shown as `\"1981\"` or `\"1981-12\"`. ")
    release_date_precision: StrictStr = Field(..., description="The precision with which `release_date` value is known. ")
    resume_point: ResumePointObject = Field(...)
    type: StrictStr = Field(..., description="The object type. ")
    uri: StrictStr = Field(..., description="The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the episode. ")
    restrictions: Optional[ChapterRestrictionObject] = None
    __properties = ["audio_preview_url", "available_markets", "chapter_number", "description", "html_description", "duration_ms", "explicit", "external_urls", "href", "id", "images", "is_playable", "languages", "name", "release_date", "release_date_precision", "resume_point", "type", "uri", "restrictions"]

    @validator('release_date_precision')
    def release_date_precision_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('year', 'month', 'day'):
            raise ValueError("must be one of enum values ('year', 'month', 'day')")
        return value

    @validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('episode'):
            raise ValueError("must be one of enum values ('episode')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SimplifiedChapterObject:
        """Create an instance of SimplifiedChapterObject from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of external_urls
        if self.external_urls:
            _dict['external_urls'] = self.external_urls.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in images (list)
        _items = []
        if self.images:
            for _item in self.images:
                if _item:
                    _items.append(_item.to_dict())
            _dict['images'] = _items
        # override the default output from pydantic by calling `to_dict()` of resume_point
        if self.resume_point:
            _dict['resume_point'] = self.resume_point.to_dict()
        # override the default output from pydantic by calling `to_dict()` of restrictions
        if self.restrictions:
            _dict['restrictions'] = self.restrictions.to_dict()
        # set to None if audio_preview_url (nullable) is None
        # and __fields_set__ contains the field
        if self.audio_preview_url is None and "audio_preview_url" in self.__fields_set__:
            _dict['audio_preview_url'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SimplifiedChapterObject:
        """Create an instance of SimplifiedChapterObject from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return SimplifiedChapterObject.parse_obj(obj)

        _obj = SimplifiedChapterObject.parse_obj({
            "audio_preview_url": obj.get("audio_preview_url"),
            "available_markets": obj.get("available_markets"),
            "chapter_number": obj.get("chapter_number"),
            "description": obj.get("description"),
            "html_description": obj.get("html_description"),
            "duration_ms": obj.get("duration_ms"),
            "explicit": obj.get("explicit"),
            "external_urls": ExternalUrlObject.from_dict(obj.get("external_urls")) if obj.get("external_urls") is not None else None,
            "href": obj.get("href"),
            "id": obj.get("id"),
            "images": [ImageObject.from_dict(_item) for _item in obj.get("images")] if obj.get("images") is not None else None,
            "is_playable": obj.get("is_playable"),
            "languages": obj.get("languages"),
            "name": obj.get("name"),
            "release_date": obj.get("release_date"),
            "release_date_precision": obj.get("release_date_precision"),
            "resume_point": ResumePointObject.from_dict(obj.get("resume_point")) if obj.get("resume_point") is not None else None,
            "type": obj.get("type"),
            "uri": obj.get("uri"),
            "restrictions": ChapterRestrictionObject.from_dict(obj.get("restrictions")) if obj.get("restrictions") is not None else None
        })
        return _obj


