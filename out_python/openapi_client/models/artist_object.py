# coding: utf-8

"""
    Spotify Web API with fixes and improvements from sonallux

    You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 

    The version of the OpenAPI document: 2023.8.30
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, conlist, validator
from openapi_client.models.external_url_object import ExternalUrlObject
from openapi_client.models.followers_object import FollowersObject
from openapi_client.models.image_object import ImageObject

class ArtistObject(BaseModel):
    """
    ArtistObject
    """
    external_urls: Optional[ExternalUrlObject] = None
    followers: Optional[FollowersObject] = None
    genres: Optional[conlist(StrictStr)] = Field(None, description="A list of the genres the artist is associated with. If not yet classified, the array is empty. ")
    href: Optional[StrictStr] = Field(None, description="A link to the Web API endpoint providing full details of the artist. ")
    id: Optional[StrictStr] = Field(None, description="The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the artist. ")
    images: Optional[conlist(ImageObject)] = Field(None, description="Images of the artist in various sizes, widest first. ")
    name: Optional[StrictStr] = Field(None, description="The name of the artist. ")
    popularity: Optional[StrictInt] = Field(None, description="The popularity of the artist. The value will be between 0 and 100, with 100 being the most popular. The artist's popularity is calculated from the popularity of all the artist's tracks. ")
    type: Optional[StrictStr] = Field(None, description="The object type. ")
    uri: Optional[StrictStr] = Field(None, description="The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the artist. ")
    __properties = ["external_urls", "followers", "genres", "href", "id", "images", "name", "popularity", "type", "uri"]

    @validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('artist'):
            raise ValueError("must be one of enum values ('artist')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ArtistObject:
        """Create an instance of ArtistObject from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of external_urls
        if self.external_urls:
            _dict['external_urls'] = self.external_urls.to_dict()
        # override the default output from pydantic by calling `to_dict()` of followers
        if self.followers:
            _dict['followers'] = self.followers.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in images (list)
        _items = []
        if self.images:
            for _item in self.images:
                if _item:
                    _items.append(_item.to_dict())
            _dict['images'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ArtistObject:
        """Create an instance of ArtistObject from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ArtistObject.parse_obj(obj)

        _obj = ArtistObject.parse_obj({
            "external_urls": ExternalUrlObject.from_dict(obj.get("external_urls")) if obj.get("external_urls") is not None else None,
            "followers": FollowersObject.from_dict(obj.get("followers")) if obj.get("followers") is not None else None,
            "genres": obj.get("genres"),
            "href": obj.get("href"),
            "id": obj.get("id"),
            "images": [ImageObject.from_dict(_item) for _item in obj.get("images")] if obj.get("images") is not None else None,
            "name": obj.get("name"),
            "popularity": obj.get("popularity"),
            "type": obj.get("type"),
            "uri": obj.get("uri")
        })
        return _obj


