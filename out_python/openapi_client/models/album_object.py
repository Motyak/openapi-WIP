# coding: utf-8

"""
    Spotify Web API with fixes and improvements from sonallux

    You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 

    The version of the OpenAPI document: 2023.8.30
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, conlist, validator
from openapi_client.models.album_restriction_object import AlbumRestrictionObject
from openapi_client.models.copyright_object import CopyrightObject
from openapi_client.models.external_id_object import ExternalIdObject
from openapi_client.models.external_url_object import ExternalUrlObject
from openapi_client.models.image_object import ImageObject
from openapi_client.models.paging_simplified_track_object import PagingSimplifiedTrackObject
from openapi_client.models.simplified_artist_object import SimplifiedArtistObject

class AlbumObject(BaseModel):
    """
    AlbumObject
    """
    album_type: StrictStr = Field(..., description="The type of the album. ")
    total_tracks: StrictInt = Field(..., description="The number of tracks in the album.")
    available_markets: conlist(StrictStr) = Field(..., description="The markets in which the album is available: [ISO 3166-1 alpha-2 country codes](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). _**NOTE**: an album is considered available in a market when at least 1 of its tracks is available in that market._ ")
    external_urls: ExternalUrlObject = Field(...)
    href: StrictStr = Field(..., description="A link to the Web API endpoint providing full details of the album. ")
    id: StrictStr = Field(..., description="The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the album. ")
    images: conlist(ImageObject) = Field(..., description="The cover art for the album in various sizes, widest first. ")
    name: StrictStr = Field(..., description="The name of the album. In case of an album takedown, the value may be an empty string. ")
    release_date: StrictStr = Field(..., description="The date the album was first released. ")
    release_date_precision: StrictStr = Field(..., description="The precision with which `release_date` value is known. ")
    restrictions: Optional[AlbumRestrictionObject] = None
    type: StrictStr = Field(..., description="The object type. ")
    uri: StrictStr = Field(..., description="The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the album. ")
    artists: conlist(SimplifiedArtistObject) = Field(..., description="The artists of the album. Each artist object includes a link in `href` to more detailed information about the artist. ")
    tracks: PagingSimplifiedTrackObject = Field(...)
    copyrights: conlist(CopyrightObject) = Field(..., description="The copyright statements of the album. ")
    external_ids: ExternalIdObject = Field(...)
    genres: conlist(StrictStr) = Field(..., description="A list of the genres the album is associated with. If not yet classified, the array is empty. ")
    label: StrictStr = Field(..., description="The label associated with the album. ")
    popularity: StrictInt = Field(..., description="The popularity of the album. The value will be between 0 and 100, with 100 being the most popular. ")
    __properties = ["album_type", "total_tracks", "available_markets", "external_urls", "href", "id", "images", "name", "release_date", "release_date_precision", "restrictions", "type", "uri", "artists", "tracks", "copyrights", "external_ids", "genres", "label", "popularity"]

    @validator('album_type')
    def album_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('album', 'single', 'compilation'):
            raise ValueError("must be one of enum values ('album', 'single', 'compilation')")
        return value

    @validator('release_date_precision')
    def release_date_precision_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('year', 'month', 'day'):
            raise ValueError("must be one of enum values ('year', 'month', 'day')")
        return value

    @validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('album'):
            raise ValueError("must be one of enum values ('album')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> AlbumObject:
        """Create an instance of AlbumObject from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of external_urls
        if self.external_urls:
            _dict['external_urls'] = self.external_urls.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in images (list)
        _items = []
        if self.images:
            for _item in self.images:
                if _item:
                    _items.append(_item.to_dict())
            _dict['images'] = _items
        # override the default output from pydantic by calling `to_dict()` of restrictions
        if self.restrictions:
            _dict['restrictions'] = self.restrictions.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in artists (list)
        _items = []
        if self.artists:
            for _item in self.artists:
                if _item:
                    _items.append(_item.to_dict())
            _dict['artists'] = _items
        # override the default output from pydantic by calling `to_dict()` of tracks
        if self.tracks:
            _dict['tracks'] = self.tracks.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in copyrights (list)
        _items = []
        if self.copyrights:
            for _item in self.copyrights:
                if _item:
                    _items.append(_item.to_dict())
            _dict['copyrights'] = _items
        # override the default output from pydantic by calling `to_dict()` of external_ids
        if self.external_ids:
            _dict['external_ids'] = self.external_ids.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AlbumObject:
        """Create an instance of AlbumObject from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return AlbumObject.parse_obj(obj)

        _obj = AlbumObject.parse_obj({
            "album_type": obj.get("album_type"),
            "total_tracks": obj.get("total_tracks"),
            "available_markets": obj.get("available_markets"),
            "external_urls": ExternalUrlObject.from_dict(obj.get("external_urls")) if obj.get("external_urls") is not None else None,
            "href": obj.get("href"),
            "id": obj.get("id"),
            "images": [ImageObject.from_dict(_item) for _item in obj.get("images")] if obj.get("images") is not None else None,
            "name": obj.get("name"),
            "release_date": obj.get("release_date"),
            "release_date_precision": obj.get("release_date_precision"),
            "restrictions": AlbumRestrictionObject.from_dict(obj.get("restrictions")) if obj.get("restrictions") is not None else None,
            "type": obj.get("type"),
            "uri": obj.get("uri"),
            "artists": [SimplifiedArtistObject.from_dict(_item) for _item in obj.get("artists")] if obj.get("artists") is not None else None,
            "tracks": PagingSimplifiedTrackObject.from_dict(obj.get("tracks")) if obj.get("tracks") is not None else None,
            "copyrights": [CopyrightObject.from_dict(_item) for _item in obj.get("copyrights")] if obj.get("copyrights") is not None else None,
            "external_ids": ExternalIdObject.from_dict(obj.get("external_ids")) if obj.get("external_ids") is not None else None,
            "genres": obj.get("genres"),
            "label": obj.get("label"),
            "popularity": obj.get("popularity")
        })
        return _obj


