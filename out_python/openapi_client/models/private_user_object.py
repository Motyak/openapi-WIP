# coding: utf-8

"""
    Spotify Web API with fixes and improvements from sonallux

    You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 

    The version of the OpenAPI document: 2023.8.30
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist
from openapi_client.models.explicit_content_settings_object import ExplicitContentSettingsObject
from openapi_client.models.external_url_object import ExternalUrlObject
from openapi_client.models.followers_object import FollowersObject
from openapi_client.models.image_object import ImageObject

class PrivateUserObject(BaseModel):
    """
    PrivateUserObject
    """
    country: Optional[StrictStr] = Field(None, description="The country of the user, as set in the user's account profile. An [ISO 3166-1 alpha-2 country code](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). _This field is only available when the current user has granted access to the [user-read-private](/documentation/web-api/concepts/scopes/#list-of-scopes) scope._ ")
    display_name: Optional[StrictStr] = Field(None, description="The name displayed on the user's profile. `null` if not available. ")
    email: Optional[StrictStr] = Field(None, description="The user's email address, as entered by the user when creating their account. _**Important!** This email address is unverified; there is no proof that it actually belongs to the user._ _This field is only available when the current user has granted access to the [user-read-email](/documentation/web-api/concepts/scopes/#list-of-scopes) scope._ ")
    explicit_content: Optional[ExplicitContentSettingsObject] = None
    external_urls: Optional[ExternalUrlObject] = None
    followers: Optional[FollowersObject] = None
    href: Optional[StrictStr] = Field(None, description="A link to the Web API endpoint for this user. ")
    id: Optional[StrictStr] = Field(None, description="The [Spotify user ID](/documentation/web-api/concepts/spotify-uris-ids) for the user. ")
    images: Optional[conlist(ImageObject)] = Field(None, description="The user's profile image.")
    product: Optional[StrictStr] = Field(None, description="The user's Spotify subscription level: \"premium\", \"free\", etc. (The subscription level \"open\" can be considered the same as \"free\".) _This field is only available when the current user has granted access to the [user-read-private](/documentation/web-api/concepts/scopes/#list-of-scopes) scope._ ")
    type: Optional[StrictStr] = Field(None, description="The object type: \"user\" ")
    uri: Optional[StrictStr] = Field(None, description="The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the user. ")
    __properties = ["country", "display_name", "email", "explicit_content", "external_urls", "followers", "href", "id", "images", "product", "type", "uri"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PrivateUserObject:
        """Create an instance of PrivateUserObject from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of explicit_content
        if self.explicit_content:
            _dict['explicit_content'] = self.explicit_content.to_dict()
        # override the default output from pydantic by calling `to_dict()` of external_urls
        if self.external_urls:
            _dict['external_urls'] = self.external_urls.to_dict()
        # override the default output from pydantic by calling `to_dict()` of followers
        if self.followers:
            _dict['followers'] = self.followers.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in images (list)
        _items = []
        if self.images:
            for _item in self.images:
                if _item:
                    _items.append(_item.to_dict())
            _dict['images'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PrivateUserObject:
        """Create an instance of PrivateUserObject from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PrivateUserObject.parse_obj(obj)

        _obj = PrivateUserObject.parse_obj({
            "country": obj.get("country"),
            "display_name": obj.get("display_name"),
            "email": obj.get("email"),
            "explicit_content": ExplicitContentSettingsObject.from_dict(obj.get("explicit_content")) if obj.get("explicit_content") is not None else None,
            "external_urls": ExternalUrlObject.from_dict(obj.get("external_urls")) if obj.get("external_urls") is not None else None,
            "followers": FollowersObject.from_dict(obj.get("followers")) if obj.get("followers") is not None else None,
            "href": obj.get("href"),
            "id": obj.get("id"),
            "images": [ImageObject.from_dict(_item) for _item in obj.get("images")] if obj.get("images") is not None else None,
            "product": obj.get("product"),
            "type": obj.get("type"),
            "uri": obj.get("uri")
        })
        return _obj


