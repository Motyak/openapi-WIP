# coding: utf-8

"""
    Spotify Web API with fixes and improvements from sonallux

    You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 

    The version of the OpenAPI document: 2023.8.30
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr

class RecommendationSeedObject(BaseModel):
    """
    RecommendationSeedObject
    """
    after_filtering_size: Optional[StrictInt] = Field(None, alias="afterFilteringSize", description="The number of tracks available after min\\_\\* and max\\_\\* filters have been applied. ")
    after_relinking_size: Optional[StrictInt] = Field(None, alias="afterRelinkingSize", description="The number of tracks available after relinking for regional availability. ")
    href: Optional[StrictStr] = Field(None, description="A link to the full track or artist data for this seed. For tracks this will be a link to a Track Object. For artists a link to an Artist Object. For genre seeds, this value will be `null`. ")
    id: Optional[StrictStr] = Field(None, description="The id used to select this seed. This will be the same as the string used in the `seed_artists`, `seed_tracks` or `seed_genres` parameter. ")
    initial_pool_size: Optional[StrictInt] = Field(None, alias="initialPoolSize", description="The number of recommended tracks available for this seed. ")
    type: Optional[StrictStr] = Field(None, description="The entity type of this seed. One of `artist`, `track` or `genre`. ")
    __properties = ["afterFilteringSize", "afterRelinkingSize", "href", "id", "initialPoolSize", "type"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> RecommendationSeedObject:
        """Create an instance of RecommendationSeedObject from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> RecommendationSeedObject:
        """Create an instance of RecommendationSeedObject from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return RecommendationSeedObject.parse_obj(obj)

        _obj = RecommendationSeedObject.parse_obj({
            "after_filtering_size": obj.get("afterFilteringSize"),
            "after_relinking_size": obj.get("afterRelinkingSize"),
            "href": obj.get("href"),
            "id": obj.get("id"),
            "initial_pool_size": obj.get("initialPoolSize"),
            "type": obj.get("type")
        })
        return _obj


