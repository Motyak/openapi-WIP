# coding: utf-8

"""
    Spotify Web API with fixes and improvements from sonallux

    You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 

    The version of the OpenAPI document: 2023.8.30
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conint

class DeviceObject(BaseModel):
    """
    DeviceObject
    """
    id: Optional[StrictStr] = Field(None, description="The device ID.")
    is_active: Optional[StrictBool] = Field(None, description="If this device is the currently active device.")
    is_private_session: Optional[StrictBool] = Field(None, description="If this device is currently in a private session.")
    is_restricted: Optional[StrictBool] = Field(None, description="Whether controlling this device is restricted. At present if this is \"true\" then no Web API commands will be accepted by this device.")
    name: Optional[StrictStr] = Field(None, description="A human-readable name for the device. Some devices have a name that the user can configure (e.g. \\\"Loudest speaker\\\") and some devices have a generic name associated with the manufacturer or device model.")
    type: Optional[StrictStr] = Field(None, description="Device type, such as \"computer\", \"smartphone\" or \"speaker\".")
    volume_percent: Optional[conint(strict=True, le=100, ge=0)] = Field(None, description="The current volume in percent.")
    supports_volume: Optional[StrictBool] = Field(None, description="If this device can be used to set the volume.")
    __properties = ["id", "is_active", "is_private_session", "is_restricted", "name", "type", "volume_percent", "supports_volume"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> DeviceObject:
        """Create an instance of DeviceObject from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if id (nullable) is None
        # and __fields_set__ contains the field
        if self.id is None and "id" in self.__fields_set__:
            _dict['id'] = None

        # set to None if volume_percent (nullable) is None
        # and __fields_set__ contains the field
        if self.volume_percent is None and "volume_percent" in self.__fields_set__:
            _dict['volume_percent'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DeviceObject:
        """Create an instance of DeviceObject from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return DeviceObject.parse_obj(obj)

        _obj = DeviceObject.parse_obj({
            "id": obj.get("id"),
            "is_active": obj.get("is_active"),
            "is_private_session": obj.get("is_private_session"),
            "is_restricted": obj.get("is_restricted"),
            "name": obj.get("name"),
            "type": obj.get("type"),
            "volume_percent": obj.get("volume_percent"),
            "supports_volume": obj.get("supports_volume")
        })
        return _obj


